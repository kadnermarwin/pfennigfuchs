{"version":3,"file":"settlement.1e388715.js","sources":["../src/worker/settlement.ts"],"sourcesContent":["/* eslint-env worker */\r\ndeclare const self: DedicatedWorkerGlobalScope;\r\n\r\nself.onmessage = (msg) => {\r\n    try {\r\n        const result = optimize(msg.data as Parameters<typeof optimize>[0]);\r\n        self.postMessage(result);\r\n    } catch (e) {\r\n        self.postMessage(e);\r\n    } finally {\r\n        self.close();\r\n    }\r\n}\r\n\r\ntype matrixId = string;\r\ntype debt = string;\r\ntype subset = number;\r\ntype node = number;\r\n\r\nexport function round(i: ReturnType<typeof optimize>): ReturnType<typeof optimize> {\r\n    return i.map(([u1, u2, a]) => [u1, u2, parseFloat(a).toFixed(2)]);\r\n}\r\n\r\nexport function optimize(balances: Array<[matrixId, debt]>): Array<[matrixId, matrixId, debt]> {\r\n    const retArray = new Array<[matrixId, matrixId, debt]>;\r\n    if (+balances.filter(b => +b[1] == 0).length >32) {\r\n        const v_star = balances.filter(e=>+e[1] != 0).map(e=>+e)\r\n        const nodes: Array<node> = getNodesFromSubset(1<<v_star.length - 1);\r\n        const creditors: Array<node> = nodes.filter(u => sums[1 << u] < 0);\r\n        const debtors: Array<node> = nodes.filter(u => sums[1 << u] > 0);\r\n        debtors.forEach(debtor => {\r\n            let debt: number = sums[1 << debtor]\r\n            creditors.forEach(creditor => {\r\n                if (!debt || !sums[1<<creditor]) return;\r\n                if (debt + sums[1 << creditor] > 0) {\r\n                    retArray.push([balances[v_star[debtor]][0], balances[v_star[creditor]][0], String(-sums[1 << creditor])]);\r\n                    debt += sums[1 << creditor];\r\n                    sums[1 << creditor] = 0;\r\n                } else {\r\n                    retArray.push([balances[v_star[debtor]][0], balances[v_star[creditor]][0], String(debt)]);\r\n                    sums[1 << creditor] += debt;\r\n                    debt = 0;\r\n                }\r\n            })\r\n        })\r\n        return round(retArray);\r\n    }\r\n    const [v_star, sums, s_0] = createVStarAndSums(balances);\r\n    const [s_0_nonPair, p] = clearPairs(s_0);\r\n    const s_0_nonAtomic = clearNonAtomicSets(s_0_nonPair);\r\n    const [, best_subsets] = buildDP(v_star.length, s_0_nonAtomic, sums);\r\n    p.forEach(pair => {\r\n        const [u, v] = getNodesFromSubset(pair);\r\n        if (sums[1<<u] > 0) {\r\n            retArray.push([balances[v_star[u]][0], balances[v_star[v]][0], String(sums[1 << u])])\r\n        } else {\r\n            retArray.push([balances[v_star[v]][0], balances[v_star[u]][0], String(-sums[1 << u])])\r\n        }\r\n    })\r\n    best_subsets.forEach(subset => {\r\n        const nodes: Array<node> = getNodesFromSubset(subset);\r\n        const creditors: Array<node> = nodes.filter(u => sums[1 << u] < 0);\r\n        const debtors: Array<node> = nodes.filter(u => sums[1 << u] > 0);\r\n        debtors.forEach(debtor => {\r\n            let debt: number = sums[1 << debtor]\r\n            creditors.forEach(creditor => {\r\n                if (!debt || !sums[1<<creditor]) return;\r\n                if (debt + sums[1 << creditor] > 0) {\r\n                    retArray.push([balances[v_star[debtor]][0], balances[v_star[creditor]][0], String(-sums[1 << creditor])]);\r\n                    debt += sums[1 << creditor];\r\n                    sums[1 << creditor] = 0;\r\n                } else {\r\n                    retArray.push([balances[v_star[debtor]][0], balances[v_star[creditor]][0], String(debt)]);\r\n                    sums[1 << creditor] += debt;\r\n                    debt = 0;\r\n                }\r\n            })\r\n        })\r\n    });\r\n    return round(retArray);\r\n}\r\n\r\n/**\r\n * \r\n * @param balances \r\n * @returns [V*, sums]\r\n */\r\nexport function createVStarAndSums(balances: Array<[matrixId, debt]>): [Array<node>, Array<number>, Array<subset>] {\r\n    const sums: Array<number> = [];\r\n    const v_star: Array<node> = [];\r\n    const s_0: Array<subset> = [];\r\n    balances.forEach((node, index) => {\r\n        if (+node[1]) {\r\n            sums[(2 ** (v_star.length))] = +node[1];\r\n            v_star.push((index));\r\n        }\r\n    });\r\n    const subsets = [...Array(2 ** v_star.length).keys()];\r\n    subsets.forEach((subset, index) => {\r\n        if (subset != 0) {\r\n            sums[subset] = isNaN(sums[subset]) ? 0 : sums[subset];\r\n            v_star.forEach((node, index) => {\r\n                if (subset != 2 ** index && subset & 2 ** index) {\r\n                    sums[subset] = +(sums[subset] + sums[2 ** index]).toFixed(2);\r\n                }\r\n            });\r\n            if (!sums[subset]) {\r\n                s_0.push(index)\r\n            }\r\n        }\r\n    });\r\n    return [v_star, sums, s_0];\r\n}\r\n\r\n\r\n/**\r\n * \r\n * @param s_0 \r\n * @returns [S_0, P]\r\n */\r\nexport function clearPairs(s_0: Array<subset>): [Array<subset>, Array<subset>] {\r\n    const inPair: Array<subset> = [];\r\n    const cleanSubsets: Array<subset> = [];\r\n    s_0.forEach(element => {\r\n        if (countSetBits(element) == 2) {\r\n            if (!inPair.some(pair => pair & element)) {\r\n                cleanSubsets.push(element);\r\n                inPair.push(element);\r\n            }\r\n        }\r\n    });\r\n    return [s_0.filter(subset => !inPair.some(pair => pair & subset)), cleanSubsets];\r\n}\r\n\r\n/**\r\n * \r\n * @param s_0 \r\n * @returns S_0\r\n */\r\nexport function clearNonAtomicSets(s_0: Array<subset>): Array<subset> {\r\n    return s_0.filter(subset =>\r\n        !(s_0.some(e => e != subset && (e & subset) == e))\r\n    );\r\n}\r\n\r\n/**\r\n * \r\n * @param subset\r\n * @param s_0 \r\n * @returns S' for given subset\r\n */\r\nexport function getValidSubsetsFromNumber(subset: subset, s_0: Array<subset>): Array<subset> {\r\n    return s_0.filter(e => (e & subset) == e);\r\n}\r\n\r\nexport function getNodesFromSubset(subset: subset): Array<node> {\r\n    const nodes = new Array<node>;\r\n    while (subset) {\r\n        const u: number = 31 - Math.clz32(subset);\r\n        nodes.push(u);\r\n        subset &= ~(1 << u);\r\n    }\r\n    return nodes;\r\n}\r\n\r\n\r\n/**\r\n * \r\n * @param n \r\n * @param s_0 \r\n * @param sums \r\n * @returns [subset, DP]\r\n */\r\nexport function buildDP(n: number, s_0: Array<subset>, sums: Array<number>): [Array<[Array<subset>, number]>,  Array<subset>] {\r\n    const subsets = [...Array(2 ** n).keys()].sort((a,b) => countSetBits(a) - countSetBits(b))\r\n    const dp: Array<[Array<subset>, number]> = [];\r\n    subsets.forEach(subset => {\r\n        if (subset === 0) {\r\n            dp[subset] = [[], 0];\r\n        } else if (sums[subset] === 0) {\r\n            const s_dash = getValidSubsetsFromNumber(subset, s_0);\r\n            const tmp: Array<[Array<subset>, number]> = s_dash.filter(e => dp[subset & ~e]).map(e =>[dp[subset & ~e][0].concat(e), dp[subset & ~e][1] + 1]);\r\n            if (tmp.length) {\r\n                const max: [Array<subset>, number] = tmp.reduce((p, c) => c[1] > p[1] ? c : p)\r\n                dp[subset] = max;\r\n            }\r\n        }\r\n    });\r\n    return [dp, dp[dp.length - 1][0]];\r\n}\r\n\r\nfunction countSetBits(n: number) {\r\n    n = n - ((n >> 1) & 0x55555555)\r\n    n = (n & 0x33333333) + ((n >> 2) & 0x33333333)\r\n    return ((n + (n >> 4) & 0xF0F0F0F) * 0x1010101) >> 24\r\n}"],"names":["msg","result","optimize","e","round","i","u1","u2","a","balances","retArray","b","v_star","nodes","getNodesFromSubset","creditors","sums","u","debtor","debt","creditor","s_0","createVStarAndSums","s_0_nonPair","clearPairs","s_0_nonAtomic","clearNonAtomicSets","best_subsets","buildDP","pair","v","subset","node","index","inPair","cleanSubsets","element","countSetBits","getValidSubsetsFromNumber","n","subsets","dp","tmp","max","p","c"],"mappings":"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"}